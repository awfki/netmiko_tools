#!/usr/bin/env python
"""Create grep like remote behavior on show run or command output."""
from __future__ import print_function
from __future__ import unicode_literals

import argparse
import sys
import os
import subprocess
import threading
try:
    from Queue import Queue
except ImportError:
    from queue import Queue
from datetime import datetime

from netmiko import ConnectHandler
from netmiko.utilities import load_devices, display_inventory
from netmiko.utilities import obtain_all_devices
from netmiko.utilities import obtain_netmiko_filename, write_tmp_file, ensure_dir_exists
from netmiko.utilities import find_netmiko_dir
from netmiko.utilities import SHOW_RUN_MAPPER

#2016-12-16/DN
import json
#2016-12-16/DN
import logging

# 2016-12-16/DN: comment the following line to enable debug messages (would be better as a CLI option)
logging.disable(logging.CRITICAL)
logLevel = logging.DEBUG
logFormat = "%(levelname)-8s == %(asctime)s %(module)s  Line:%(lineno)4d  %(funcName)s == %(message)s"
logging.basicConfig(level=logLevel, format=logFormat, datefmt='%Y-%m-%d %H:%M:%S')
logging.debug('=== START ===')

GREP = '/bin/grep'
if not os.path.exists(GREP):
    GREP = '/usr/bin/grep'
NETMIKO_BASE_DIR = '~/.netmiko'
ERROR_PATTERN = "===failed===\n"
__version__ = '0.0.3'


def grepx(files, pattern, grep_options, use_colors=True):
    """Call system grep"""
    logging.debug('')
    if not isinstance(files, (list, tuple)):
        logging.debug('')
        files = [files]
    if use_colors:
        logging.debug('')
        grep_options += ['--color=auto']

    # Make grep output look nicer by 'cd netmiko_full_dir'
    _, netmiko_full_dir = find_netmiko_dir()
    logging.debug('')
    os.chdir(netmiko_full_dir)
    # Convert files to strip off the directory
    retrieve_file = lambda x: x.split('/')[-1]   # noqa
    files = [retrieve_file(a_file) for a_file in files]
    files.sort()
    grep_list = [GREP] + grep_options + [pattern] + files
    logging.debug(grep_list)
    proc = subprocess.Popen(grep_list, shell=False)
    logging.debug('')
    proc.communicate()
    logging.debug('')
    return ''


def ssh_conn(device_name, a_device, cli_command, output_q):
    logging.debug('')
    try:
        net_connect = ConnectHandler(**a_device)
        net_connect.enable()
        output = net_connect.send_command_expect(cli_command)
        net_connect.disconnect()
    except Exception:
        output = ERROR_PATTERN
    output_q.put({device_name: output})
    logging.debug('')


def parse_arguments(args):
    """Parse command-line arguments."""
    logging.debug('')
    description = "Grep pattern search on Netmiko output (defaults to running-config)"
    parser = argparse.ArgumentParser(description=description)
    parser.add_argument("pattern", nargs='?', help="Pattern to search for",
                        action="store", type=str)
    parser.add_argument("devices", nargs='?', help="Device or group to connect to",
                        action="store", type=str)
    parser.add_argument("--cmd", help="Remote command to execute",
                        action="store", default=None, type=str)
    # parser.add_argument("--username", help="Username", action="store", type=str)
    # parser.add_argument("--password", help="Password", action="store", type=str)
    parser.add_argument("--use-cache", help="Use cached files", action="store_true")
    parser.add_argument("--list-devices", help="List devices from inventory", action="store_true")
    parser.add_argument("--display-runtime", help="Display program runtime", action="store_true")
    parser.add_argument("--hide-failed", help="Hide failed devices", action="store_true")
    parser.add_argument("--version", help="Display version", action="store_true")
    cli_args = parser.parse_args(args)
    logging.debug("cli_args = {}".format(cli_args))
    if not cli_args.list_devices and not cli_args.version:
        if not cli_args.devices or not cli_args.pattern:
            parser.error('Grep pattern or devices not specified.')
    logging.debug('')
    return cli_args


def main(args):
    logging.debug('')
    start_time = datetime.now()
    cli_args = parse_arguments(args)
    logging.debug("args = {}".format(args))
    logging.debug("cli_args = {}".format(cli_args))

    version = cli_args.version
    if version:
        print("netmiko-grep v{}".format(__version__))
        return 0
    list_devices = cli_args.list_devices
    if list_devices:
        my_devices = load_devices()
        display_inventory(my_devices)
        return 0

    cli_command = cli_args.cmd
    cmd_arg = False
    if cli_command:
        cmd_arg = True
    device_or_group = cli_args.devices.strip()
    logging.debug("device_or_group = {}".format(device_or_group))
    pattern = cli_args.pattern
    use_cached_files = cli_args.use_cache
    hide_failed = cli_args.hide_failed

    output_q = Queue()
    my_devices = load_devices()
    logging.debug("XXXmy_devices = {}".format(my_devices))
    logging.debug("list_devices = {}".format("======================="))
    logging.debug("list_devices = {}".format(json.dumps(my_devices, indent=4, sort_keys=True)))
    if device_or_group == 'all':
        device_group = obtain_all_devices(my_devices)
    else:
        try:
            devicedict_or_group = my_devices[device_or_group]
            device_group = {}
            if isinstance(devicedict_or_group, list):
                for tmp_device_name in devicedict_or_group:
                    device_group[tmp_device_name] = my_devices[tmp_device_name]
            else:
                device_group[device_or_group] = devicedict_or_group
        except KeyError:
            return "Error reading from netmiko devices file." \
                   " Device or group not found: {0}".format(device_or_group)

    # Retrieve output from devices
    my_files = []
    failed_devices = []
    if not use_cached_files:
        for device_name, a_device in device_group.items():
            if not cmd_arg:
                cli_command = SHOW_RUN_MAPPER.get(a_device['device_type'], 'show run')
            my_thread = threading.Thread(target=ssh_conn, args=(device_name, a_device,
                                                                cli_command, output_q))
            my_thread.start()
        # Make sure all threads have finished
        main_thread = threading.currentThread()
        for some_thread in threading.enumerate():
            if some_thread != main_thread:
                some_thread.join()
        # Write files
        while not output_q.empty():
            my_dict = output_q.get()
            netmiko_base_dir, netmiko_full_dir = find_netmiko_dir()
            ensure_dir_exists(netmiko_base_dir)
            ensure_dir_exists(netmiko_full_dir)
            for device_name, output in my_dict.items():
                file_name = write_tmp_file(device_name, output)
                if ERROR_PATTERN not in output:
                    my_files.append(file_name)
                else:
                    failed_devices.append(device_name)
    else:
        for device_name in device_group:
            file_name = obtain_netmiko_filename(device_name)
            try:
                with open(file_name) as f:
                    output = f.read()
            except IOError:
                return("Some cache files are missing: unable to use --use-cache option.")
            if ERROR_PATTERN not in output:
                my_files.append(file_name)
            else:
                failed_devices.append(device_name)

    grep_options = []
    grepx(my_files, pattern, grep_options)
    if cli_args.display_runtime:
        print("Total time: {0}".format(datetime.now() - start_time))

    if not hide_failed:
        if failed_devices:
            print("\n")
            print("-" * 20)
            print("Failed devices:")
            failed_devices.sort()
            for device_name in failed_devices:
                print("  {}".format(device_name))
            print()
    logging.debug('=== END ===')
    return 0

if __name__ == "__main__":
    sys.exit(main(sys.argv[1:]))
